{"ast":null,"code":"import _extends from '@babel/runtime/helpers/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/objectWithoutPropertiesLoose';\nimport { jsx } from '@emotion/core';\nimport { useRef } from 'react';\n\nfunction getClientPosition(e) {\n  var touches = e.touches;\n\n  if (touches && touches.length) {\n    var finger = touches[0];\n    return {\n      x: finger.clientX,\n      y: finger.clientY\n    };\n  }\n\n  return {\n    x: e.clientX,\n    y: e.clientY\n  };\n}\n\nvar track = {\n  position: 'relative',\n  display: 'inline-block',\n  backgroundColor: '#ddd',\n  borderRadius: 5,\n  userSelect: 'none',\n  boxSizing: 'border-box'\n};\nvar active = {\n  position: 'absolute',\n  backgroundColor: '#5e72e4',\n  borderRadius: 5,\n  userSelect: 'none',\n  boxSizing: 'border-box'\n};\nvar thumb = {\n  position: 'relative',\n  display: 'block',\n  content: '\"\"',\n  width: 18,\n  height: 18,\n  backgroundColor: '#fff',\n  borderRadius: '50%',\n  boxShadow: '0 1px 1px rgba(0,0,0,.5)',\n  userSelect: 'none',\n  boxSizing: 'border-box'\n};\nvar styles = {\n  x: {\n    track: _extends({}, track, {\n      width: 200,\n      height: 10\n    }),\n    active: _extends({}, active, {\n      top: 0,\n      height: '100%'\n    }),\n    thumb: _extends({}, thumb)\n  },\n  y: {\n    track: _extends({}, track, {\n      width: 10,\n      height: 200\n    }),\n    active: _extends({}, active, {\n      left: 0,\n      width: '100%'\n    }),\n    thumb: _extends({}, thumb)\n  },\n  xy: {\n    track: {\n      position: 'relative',\n      overflow: 'hidden',\n      width: 200,\n      height: 200,\n      backgroundColor: '#5e72e4',\n      borderRadius: 0\n    },\n    active: {},\n    thumb: _extends({}, thumb)\n  }\n};\n\nvar Slider = function Slider(_ref) {\n  var theme = _ref.theme,\n      axis = _ref.axis,\n      x = _ref.x,\n      y = _ref.y,\n      xmin = _ref.xmin,\n      xmax = _ref.xmax,\n      ymin = _ref.ymin,\n      ymax = _ref.ymax,\n      xstep = _ref.xstep,\n      ystep = _ref.ystep,\n      onChange = _ref.onChange,\n      onDragEnd = _ref.onDragEnd,\n      onClick = _ref.onClick,\n      customStyles = _ref.styles,\n      props = _objectWithoutPropertiesLoose(_ref, [\"theme\", \"axis\", \"x\", \"y\", \"xmin\", \"xmax\", \"ymin\", \"ymax\", \"xstep\", \"ystep\", \"onChange\", \"onDragEnd\", \"onClick\", \"styles\"]);\n\n  var container = useRef(null);\n  var handle = useRef(null);\n  var start = useRef({});\n  var offset = useRef({});\n\n  function getPosition() {\n    var top = (y - ymin) / (ymax - ymin) * 100;\n    var left = (x - xmin) / (xmax - xmin) * 100;\n    if (top > 100) top = 100;\n    if (top < 0) top = 0;\n    if (axis === 'x') top = 0;\n    top += '%';\n    if (left > 100) left = 100;\n    if (left < 0) left = 0;\n    if (axis === 'y') left = 0;\n    left += '%';\n    return {\n      top: top,\n      left: left\n    };\n  }\n\n  function change(_ref2) {\n    var top = _ref2.top,\n        left = _ref2.left;\n    if (!onChange) return;\n\n    var _container$current$ge = container.current.getBoundingClientRect(),\n        width = _container$current$ge.width,\n        height = _container$current$ge.height;\n\n    var dx = 0;\n    var dy = 0;\n    if (left < 0) left = 0;\n    if (left > width) left = width;\n    if (top < 0) top = 0;\n    if (top > height) top = height;\n\n    if (axis === 'x' || axis === 'xy') {\n      dx = left / width * (xmax - xmin);\n    }\n\n    if (axis === 'y' || axis === 'xy') {\n      dy = top / height * (ymax - ymin);\n    }\n\n    var x = (dx !== 0 ? parseInt(dx / xstep, 10) * xstep : 0) + xmin;\n    var y = (dy !== 0 ? parseInt(dy / ystep, 10) * ystep : 0) + ymin;\n    onChange({\n      x: x,\n      y: y\n    });\n  }\n\n  function handleMouseDown(e) {\n    e.preventDefault();\n    var dom = handle.current;\n    var clientPos = getClientPosition(e);\n    start.current = {\n      x: dom.offsetLeft,\n      y: dom.offsetTop\n    };\n    offset.current = {\n      x: clientPos.x,\n      y: clientPos.y\n    };\n    document.addEventListener('mousemove', handleDrag);\n    document.addEventListener('mouseup', handleDragEnd);\n    document.addEventListener('touchmove', handleDrag, {\n      passive: false\n    });\n    document.addEventListener('touchend', handleDragEnd);\n    document.addEventListener('touchcancel', handleDragEnd);\n  }\n\n  function getPos(e) {\n    var clientPos = getClientPosition(e);\n    var left = clientPos.x + start.current.x - offset.current.x;\n    var top = clientPos.y + start.current.y - offset.current.y;\n    return {\n      left: left,\n      top: top\n    };\n  }\n\n  function handleDrag(e) {\n    e.preventDefault();\n    change(getPos(e));\n  }\n\n  function handleDragEnd(e) {\n    e.preventDefault();\n    document.removeEventListener('mousemove', handleDrag);\n    document.removeEventListener('mouseup', handleDragEnd);\n    document.removeEventListener('touchmove', handleDrag, {\n      passive: false\n    });\n    document.removeEventListener('touchend', handleDragEnd);\n    document.removeEventListener('touchcancel', handleDragEnd);\n\n    if (onDragEnd) {\n      onDragEnd();\n    }\n  }\n\n  function handleClick(e) {\n    var clientPos = getClientPosition(e);\n    var rect = container.current.getBoundingClientRect();\n    change({\n      left: clientPos.x - rect.left,\n      top: clientPos.y - rect.top\n    });\n    if (onClick) onClick(e);\n  }\n\n  var pos = getPosition();\n  var valueStyle = {};\n  if (axis === 'x') valueStyle.width = pos.left;\n  if (axis === 'y') valueStyle.height = pos.top;\n  var styles$1 = {\n    track: _extends({}, styles[axis].track, customStyles.track),\n    active: _extends({}, styles[axis].active, customStyles.active),\n    thumb: _extends({}, styles[axis].thumb, customStyles.thumb)\n  };\n  styles$1.thumb = {\n    position: 'absolute',\n    '&:after': _extends({}, styles$1.thumb, {\n      top: axis === 'x' ? (styles$1.track.height - styles$1.thumb.height) / 2 : -styles$1.thumb.height / 2,\n      left: axis === 'y' ? (styles$1.track.width - styles$1.thumb.width) / 2 : -styles$1.thumb.width / 2\n    })\n  };\n  return jsx(\"div\", _extends({}, props, {\n    ref: container,\n    css: styles$1.track,\n    onClick: handleClick\n  }), jsx(\"div\", {\n    css: styles$1.active,\n    style: valueStyle\n  }), jsx(\"div\", {\n    ref: handle,\n    css: styles$1.thumb,\n    style: pos,\n    onTouchStart: handleMouseDown,\n    onMouseDown: handleMouseDown,\n    onClick: function onClick(e) {\n      e.stopPropagation();\n      e.nativeEvent.stopImmediatePropagation();\n    }\n  }));\n};\n\nSlider.defaultProps = {\n  axis: 'x',\n  x: 50,\n  xmin: 0,\n  xmax: 100,\n  y: 50,\n  ymin: 0,\n  ymax: 100,\n  xstep: 1,\n  ystep: 1,\n  styles: {}\n};\nexport default Slider;","map":null,"metadata":{},"sourceType":"module"}