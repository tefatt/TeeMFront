{"ast":null,"code":"import _objectWithoutProperties from \"/Users/teufiktutundzic/Desktop/lang-front/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/Users/teufiktutundzic/Desktop/lang-front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/teufiktutundzic/Desktop/lang-front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/teufiktutundzic/Desktop/lang-front/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/teufiktutundzic/Desktop/lang-front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/teufiktutundzic/Desktop/lang-front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _slicedToArray from \"/Users/teufiktutundzic/Desktop/lang-front/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/teufiktutundzic/Desktop/lang-front/src/Components/InputQuestion.js\";\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport { Button, Modal, Form, Checkbox, Input, Row, Col, Icon } from 'antd';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { inputQuestion as _inputQuestion } from '../actions/questionActions';\nvar FormItem = Form.Item;\nvar CollectionCreateForm = Form.create()(function (props) {\n  var visible = props.visible,\n      playedTime = props.playedTime,\n      onCancel = props.onCancel,\n      onCreate = props.onCreate,\n      add = props.add,\n      remove = props.remove,\n      form = props.form;\n  var getFieldDecorator = form.getFieldDecorator,\n      getFieldValue = form.getFieldValue;\n  var formItemLayout = {\n    labelCol: {\n      xs: {\n        span: 24\n      },\n      sm: {\n        span: 4\n      }\n    },\n    wrapperCol: {\n      xs: {\n        span: 24\n      },\n      sm: {\n        span: 20\n      }\n    }\n  };\n  var formItemLayoutWithOutLabel = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0\n      },\n      sm: {\n        span: 20,\n        offset: 4\n      }\n    }\n  };\n  getFieldDecorator('keys', {\n    initialValue: []\n  });\n  var keys = getFieldValue('keys');\n  var formItems = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    var _loop = function _loop() {\n      var _ref = _step.value;\n      _ref2 = _slicedToArray(_ref, 2);\n      var index = _ref2[0];\n      var k = _ref2[1];\n      formItems.push(React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(Form.Item, Object.assign({}, index === 0 ? formItemLayout : formItemLayoutWithOutLabel, {\n        label: index === 0 ? 'Answers' : '',\n        required: true,\n        key: k,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }), getFieldDecorator(\"answers[\".concat(k, \"]\"), {\n        validateTrigger: ['onChange', 'onBlur'],\n        rules: [{\n          required: true,\n          whitespace: true,\n          message: \"Please input the text of answer or delete this field.\"\n        }]\n      })(React.createElement(Input, {\n        placeholder: \"Enter your answer here\",\n        style: {\n          width: '60%',\n          marginRight: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      })), keys.length > 1 ? React.createElement(Icon, {\n        className: \"dynamic-delete-button\",\n        type: \"minus-circle-o\",\n        onClick: function onClick() {\n          return remove(k);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }) : null)), React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(Form.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, getFieldDecorator(\"isCorrect[\".concat(k, \"]\"), {})(React.createElement(Checkbox, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"Correct Answer\"))))));\n    };\n\n    for (var _iterator = keys.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _ref2;\n\n      _loop();\n    } // const formItems = keys.map((k, index) => (\n    //     <Form.Item\n    //         {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n    //         label={index === 0 ? 'Answers' : ''}\n    //         required={true}\n    //         key={k}\n    //     >\n    //         {getFieldDecorator(`answers[${k}]`, {\n    //             validateTrigger: ['onChange', 'onBlur'],\n    //             rules: [\n    //                 {\n    //                     required: true,\n    //                     whitespace: true,\n    //                     message: \"Please input the text of answer or delete this field.\",\n    //                 },\n    //             ],\n    //         })(<Input placeholder=\"Enter your answer here\" style={{width: '60%', marginRight: 8}}/>)\n    //         }\n    //         {keys.length > 1 ? (\n    //             <Icon\n    //                 className=\"dynamic-delete-button\"\n    //                 type=\"minus-circle-o\"\n    //                 onClick={() => remove(k)}\n    //             />\n    //         ) : null}\n    //     </Form.Item>\n    // <Form.Item>\n    // <Checkbox onChange={onChange}>Checkbox</Checkbox>\n    // </Form.Item>\n    // ));\n\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var questionTitle = \"Create a new question at: \".concat(playedTime, \"s\");\n  return React.createElement(Modal, {\n    visible: visible,\n    title: questionTitle,\n    okText: \"Create\",\n    onCancel: onCancel,\n    onOk: onCreate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(Form, {\n    layout: \"vertical\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(FormItem, {\n    label: \"Question text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, getFieldDecorator('title', {\n    rules: [{\n      required: true,\n      message: 'Please enter the text of question'\n    }]\n  })(React.createElement(Input, {\n    type: \"textarea\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }))), formItems, React.createElement(Form.Item, Object.assign({}, formItemLayoutWithOutLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"dashed\",\n    onClick: add,\n    style: {\n      width: '60%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    type: \"plus\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }), \" Add answer\"))));\n});\n\nvar InputQuestion =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(InputQuestion, _React$Component);\n\n  function InputQuestion() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, InputQuestion);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(InputQuestion)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      visible: false,\n      index: 0,\n      playedTime: 0\n    };\n\n    _this.showModal = function () {\n      var playedTime = _this.props.getPlayerTime();\n\n      _this.setState({\n        visible: true,\n        playedTime: playedTime\n      });\n    };\n\n    _this.handleCancel = function () {\n      _this.setState({\n        visible: false,\n        index: 0\n      });\n    };\n\n    _this.handleCreate = function () {\n      var form = _this.form;\n      form.validateFields(function (err, values) {\n        if (err) {\n          return;\n        }\n\n        values[\"playedTime\"] = _this.state.playedTime;\n        console.log(values);\n\n        var value = values[\"keys\"],\n            questionData = _objectWithoutProperties(values, [\"keys\"]); // dispatch action\n\n\n        _this.props.inputQuestion(questionData);\n\n        form.resetFields();\n\n        _this.setState({\n          visible: false,\n          index: 0,\n          playedTime: 0\n        });\n      });\n    };\n\n    _this.saveFormRef = function (form) {\n      _this.form = form;\n    };\n\n    _this.remove = function (k) {\n      console.log(k);\n      var form = _this.form; // can use data-binding to get\n\n      var keys = form.getFieldValue('keys'); // We need at least one answer\n\n      if (keys.length === 1) {\n        return;\n      } // can use data-binding to set\n\n\n      form.setFieldsValue({\n        keys: keys.filter(function (key) {\n          return key !== k;\n        })\n      });\n    };\n\n    _this.add = function () {\n      var form = _this.form; // can use data-binding to get\n\n      var keys = form.getFieldValue('keys');\n      var nextKeys = keys.concat(_this.state.index++); // can use data-binding to set\n      // important! notify form to detect changes\n\n      form.setFieldsValue({\n        keys: nextKeys\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(InputQuestion, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"primary\",\n        onClick: this.showModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"Add Question\"), React.createElement(CollectionCreateForm, {\n        ref: this.saveFormRef,\n        playedTime: this.state.playedTime,\n        visible: this.state.visible,\n        onCancel: this.handleCancel,\n        onCreate: this.handleCreate,\n        index: this.state.index,\n        add: this.add,\n        remove: this.remove,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return InputQuestion;\n}(React.Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    inputQuestion: function inputQuestion(values) {\n      dispatch(_inputQuestion(values));\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(InputQuestion);","map":{"version":3,"sources":["/Users/teufiktutundzic/Desktop/lang-front/src/Components/InputQuestion.js"],"names":["React","Button","Modal","Form","Checkbox","Input","Row","Col","Icon","bindActionCreators","connect","inputQuestion","FormItem","Item","CollectionCreateForm","create","props","visible","playedTime","onCancel","onCreate","add","remove","form","getFieldDecorator","getFieldValue","formItemLayout","labelCol","xs","span","sm","wrapperCol","formItemLayoutWithOutLabel","offset","initialValue","keys","formItems","index","k","push","validateTrigger","rules","required","whitespace","message","width","marginRight","length","entries","questionTitle","InputQuestion","state","showModal","getPlayerTime","setState","handleCancel","handleCreate","validateFields","err","values","console","log","value","questionData","resetFields","saveFormRef","setFieldsValue","filter","key","nextKeys","concat","Component","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport 'antd/dist/antd.css';\nimport {Button, Modal, Form, Checkbox, Input, Row, Col, Icon} from 'antd';\nimport {bindActionCreators} from 'redux'\nimport {connect} from 'react-redux';\nimport {inputQuestion} from '../actions/questionActions';\n\n\nconst FormItem = Form.Item;\n\nconst CollectionCreateForm = Form.create()(\n    (props) => {\n        const {visible, playedTime, onCancel, onCreate, add, remove, form} = props;\n\n        const {getFieldDecorator, getFieldValue} = form;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 20},\n            },\n        };\n        const formItemLayoutWithOutLabel = {\n            wrapperCol: {\n                xs: {span: 24, offset: 0},\n                sm: {span: 20, offset: 4},\n            },\n        };\n        getFieldDecorator('keys', {initialValue: []});\n        const keys = getFieldValue('keys');\n\n        const formItems = [];\n        for (let [index, k] of keys.entries()) {\n            formItems.push(\n                <Row>\n                    <Col>\n                        <Form.Item\n                            {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                            label={index === 0 ? 'Answers' : ''}\n                            required={true}\n                            key={k}\n                        >\n                            {getFieldDecorator(`answers[${k}]`, {\n                                validateTrigger: ['onChange', 'onBlur'],\n                                rules: [\n                                    {\n                                        required: true,\n                                        whitespace: true,\n                                        message: \"Please input the text of answer or delete this field.\",\n                                    },\n                                ],\n                            })(<Input placeholder=\"Enter your answer here\" style={{width: '60%', marginRight: 8}}/>)\n                            }\n                            {keys.length > 1 ? (\n                                <Icon\n                                    className=\"dynamic-delete-button\"\n                                    type=\"minus-circle-o\"\n                                    onClick={() => remove(k)}\n                                />\n                            ) : null}\n                        </Form.Item>\n                    </Col>\n                    <Col>\n                        <Form.Item>\n                            {getFieldDecorator(`isCorrect[${k}]`, {\n                            })(<Checkbox>Correct Answer</Checkbox>)}\n                        </Form.Item>\n                    </Col>\n                </Row>\n            )\n        }\n\n        // const formItems = keys.map((k, index) => (\n        //     <Form.Item\n        //         {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n        //         label={index === 0 ? 'Answers' : ''}\n        //         required={true}\n        //         key={k}\n        //     >\n        //         {getFieldDecorator(`answers[${k}]`, {\n        //             validateTrigger: ['onChange', 'onBlur'],\n        //             rules: [\n        //                 {\n        //                     required: true,\n        //                     whitespace: true,\n        //                     message: \"Please input the text of answer or delete this field.\",\n        //                 },\n        //             ],\n        //         })(<Input placeholder=\"Enter your answer here\" style={{width: '60%', marginRight: 8}}/>)\n        //         }\n        //         {keys.length > 1 ? (\n        //             <Icon\n        //                 className=\"dynamic-delete-button\"\n        //                 type=\"minus-circle-o\"\n        //                 onClick={() => remove(k)}\n        //             />\n        //         ) : null}\n        //     </Form.Item>\n        // <Form.Item>\n        // <Checkbox onChange={onChange}>Checkbox</Checkbox>\n        // </Form.Item>\n        // ));\n        const questionTitle = `Create a new question at: ${playedTime}s`;\n        return (\n            <Modal\n                visible={visible}\n                title={questionTitle}\n                okText=\"Create\"\n                onCancel={onCancel}\n                onOk={onCreate}\n            >\n                <Form layout=\"vertical\">\n                    <FormItem label=\"Question text\">\n                        {getFieldDecorator('title', {\n                            rules: [{required: true, message: 'Please enter the text of question'}],\n                        })(\n                            <Input type=\"textarea\"/>\n                        )}\n\n                    </FormItem>\n                    {formItems}\n                    <Form.Item {...formItemLayoutWithOutLabel}>\n                        <Button type=\"dashed\" onClick={add} style={{width: '60%'}}>\n                            <Icon type=\"plus\"/> Add answer\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Modal>\n        );\n    }\n);\n\nclass InputQuestion extends React.Component {\n    state = {\n        visible: false,\n        index: 0,\n        playedTime: 0\n    };\n    showModal = () => {\n        let playedTime = this.props.getPlayerTime();\n        this.setState({visible: true, playedTime});\n    };\n    handleCancel = () => {\n        this.setState({visible: false, index: 0});\n    };\n    handleCreate = () => {\n        const form = this.form;\n        form.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n            values[\"playedTime\"] = this.state.playedTime;\n            console.log(values)\n            const {[\"keys\"]: value, ...questionData} = values;\n\n            // dispatch action\n            this.props.inputQuestion(questionData);\n            form.resetFields();\n            this.setState({visible: false, index: 0, playedTime: 0});\n        });\n    };\n    saveFormRef = (form) => {\n        this.form = form;\n    };\n\n    remove = k => {\n        console.log(k)\n        const form = this.form;\n        // can use data-binding to get\n        const keys = form.getFieldValue('keys');\n        // We need at least one answer\n        if (keys.length === 1) {\n            return;\n        }\n\n        // can use data-binding to set\n        form.setFieldsValue({\n            keys: keys.filter(key => key !== k),\n        });\n    };\n\n    add = () => {\n        const form = this.form;\n        // can use data-binding to get\n        const keys = form.getFieldValue('keys');\n        const nextKeys = keys.concat(this.state.index++);\n        // can use data-binding to set\n        // important! notify form to detect changes\n        form.setFieldsValue({\n            keys: nextKeys,\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <Button type=\"primary\" onClick={this.showModal}>Add Question</Button>\n                <CollectionCreateForm\n                    ref={this.saveFormRef}\n                    playedTime={this.state.playedTime}\n                    visible={this.state.visible}\n                    onCancel={this.handleCancel}\n                    onCreate={this.handleCreate}\n                    index={this.state.index}\n                    add={this.add}\n                    remove={this.remove}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        inputQuestion: (values) => {\n            dispatch(inputQuestion(values));\n        }\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(InputQuestion);"]},"metadata":{},"sourceType":"module"}