{"ast":null,"code":"import _objectSpread from \"/Users/teufiktutundzic/Desktop/lang-front/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/teufiktutundzic/Desktop/lang-front/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar initialState = {\n  inputtedQuestions: []\n};\n\nvar questionReducer = function questionReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"INPUT_QUESTION\":\n      return {\n        inputtedQuestions: [].concat(_toConsumableArray(state.inputtedQuestions), [action.payload])\n      };\n\n    case \"EDIT_QUESTION\":\n      console.log(action);\n      console.log(state.inputtedQuestions);\n      return {\n        // inputtedQuestions: [...state.inputtedQuestions, action.payload]\n        inputtedQuestions: state.inputtedQuestions.map(function (item, index) {\n          if (index !== action.payload.index) {\n            // This isn't the item we care about - keep it as-is\n            return item;\n          } // Otherwise, this is the one we want - return an updated value\n\n\n          return _objectSpread({}, item, action.payload.editedQuestion);\n        })\n      };\n\n    case \"DELETE_QUESTION\":\n      return {\n        inputtedQuestions: [].concat(_toConsumableArray(state.inputtedQuestions), [action.payload])\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default questionReducer;","map":{"version":3,"sources":["/Users/teufiktutundzic/Desktop/lang-front/src/reducers/questionReducer.js"],"names":["initialState","inputtedQuestions","questionReducer","state","action","type","payload","console","log","map","item","index","editedQuestion"],"mappings":";;AAAA,IAAMA,YAAY,GAAG;AACjBC,EAAAA,iBAAiB,EAAE;AADF,CAArB;;AAIA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;;AACtD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,gBAAL;AACI,aAAO;AACHJ,QAAAA,iBAAiB,+BAAME,KAAK,CAACF,iBAAZ,IAA+BG,MAAM,CAACE,OAAtC;AADd,OAAP;;AAGJ,SAAK,eAAL;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACF,iBAAlB;AACA,aAAO;AACH;AACAA,QAAAA,iBAAiB,EAAEE,KAAK,CAACF,iBAAN,CAAwBQ,GAAxB,CAA4B,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAChE,cAAIA,KAAK,KAAKP,MAAM,CAACE,OAAP,CAAeK,KAA7B,EAAoC;AAChC;AACA,mBAAOD,IAAP;AACH,WAJ+D,CAMhE;;;AACA,mCACOA,IADP,EAEON,MAAM,CAACE,OAAP,CAAeM,cAFtB;AAIH,SAXsB;AAFhB,OAAP;;AAgBJ,SAAK,iBAAL;AACI,aAAO;AACHX,QAAAA,iBAAiB,+BAAME,KAAK,CAACF,iBAAZ,IAA+BG,MAAM,CAACE,OAAtC;AADd,OAAP;;AAGJ;AACI,aAAOH,KAAP;AA7BR;AA+BH,CAhCD;;AAkCA,eAAeD,eAAf","sourcesContent":["const initialState = {\n    inputtedQuestions: []\n};\n\nconst questionReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case \"INPUT_QUESTION\":\n            return {\n                inputtedQuestions: [...state.inputtedQuestions, action.payload]\n            };\n        case \"EDIT_QUESTION\":\n            console.log(action);\n            console.log(state.inputtedQuestions);\n            return {\n                // inputtedQuestions: [...state.inputtedQuestions, action.payload]\n                inputtedQuestions: state.inputtedQuestions.map((item, index) => {\n                if (index !== action.payload.index) {\n                    // This isn't the item we care about - keep it as-is\n                    return item\n                }\n\n                // Otherwise, this is the one we want - return an updated value\n                return {\n                    ...item,\n                    ...action.payload.editedQuestion\n                }\n            })\n            };\n\n        case \"DELETE_QUESTION\":\n            return {\n                inputtedQuestions: [...state.inputtedQuestions, action.payload]\n            };\n        default:\n            return state;\n    }\n};\n\nexport default questionReducer;"]},"metadata":{},"sourceType":"module"}